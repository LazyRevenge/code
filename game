use input_macro::input;

#[derive(Clone, Copy)]
enum Block {
    Wall,
    Empty,
    Exit,
}

use Block::*;

static MAP: [[Block; 5]; 5] = [
    [Wall, Empty, Empty, Wall, Exit],
    [Wall, Wall, Empty, Empty, Empty],
    [Empty, Wall, Empty, Wall, Wall],
    [Empty, Wall, Empty, Empty, Empty],
    [Empty, Empty, Empty, Wall, Empty],
];

#[derive(Default)]
enum Direction {
    #[default]
    Up,
    Right,
    Down,
    Left,
}

#[derive(Default)]
struct Person {
    x: usize,
    y: usize,
    direction: Direction,
}

#[derive(Default)]
enum Action {
    #[default]
    None,
    Walk,
    Rotate,
    Wall,
    Exit,
}

impl Person {
    fn forward(&mut self) -> Action {
        let (mut x, mut y) = (self.x, self.y);
        match self.direction {
            Direction::Up => y -= 1,
            Direction::Right => x += 1,
            Direction::Left => x -= 1,
            Direction::Down => y += 1,
        }
        if x>=MAP[0].len()  y>=MAP.len()  x==0  y==0{
            return ACtion::Wall;
        }

        let block = MAP[y][x];
        match block {
            Empty => {
                self.x = x;
                self.y = y;
                Action::Walk
            }
            Wall => Action::Wall,
            Exit => {
                self.x = x;
                self.y = y;
                Action::Exit
            }
            _ => Action::None,
        }
    }

    fn back(&mut self) -> Action {
        let (mut x, mut y) = (self.x, self.y);
        match self.direction {
            Direction::Up => y += 1,
            Direction::Right => x -= 1,
            Direction::Left => x += 1,
            Direction::Down => y -= 1,
        }

        if x>=MAP[0].len()  y>=MAP.len()  x==0  y==0{
            return ACtion::Wall;
        }

        let block = MAP[y][x];
        match block {
            Empty => {
                self.x = x;
                self.y = y;
                Action::Walk
            }
            Wall => Action::Wall,
            Exit => {
                self.x = x;
                self.y = y;
                Action::Exit
            }
            _ => Action::None,
        }
    }

    fn right(&mut self) -> Action {
        self.direction = match self.direction {
            Direction::Up => Direction::Right,
            Direction::Right => Direction::Down,
            Direction::Left => Direction::Up,
            Direction::Down => Direction::Left,
        };
        Action::Rotate
    }

    fn left(&mut self) -> Action {
        self.direction = match self.direction {
            Direction::Up => Direction::Left,
            Direction::Right => Direction::Up,
            Direction::Left => Direction::Down,
            Direction::Down => Direction::Right,
        };
        Action::Rotate
    }
}

fn main() {
    ///let mut person = Person::default();
    //let mut last_action = Action::default();
    let mut person = Person{
        x:1,
        y:0,
    ..Default::default()
    };
    let mut last_action = Action::default();
    loop {
        render(&person);
        match last_action {
            Action::None => {}
            Action::Walk => {}
            Action::Rotate => {}
            Action::Wall => {
                println!()
            }
            Action::Exit => {
                println!("Вы победили!");
                break;
            }
        }

        let action = input!("> ").to_lowercase();
        last_action = match action.as_str() {
            "forward" => person.forward(),
            "back" => person.back(),
            "right" => person.right(),
            "left" => person.left(),
            _ => panic!("Нет такой команды"),
        };
    }
}
pub const WALL_K: &str =
r#"╔════════════════════════╗
║````````````````````````║
║````________________````║
║```|                |║
║|                |║
║|                |║
║|                |║
║|                |║
║|                |║
║|                |║
║|________________|```║
║````````````````````````║
║````````````````````````║
╚════════════════════════╝
"#;
pub const WALL_J: &str =
r#"╔════════════════════════╗
║````````````````````````║
║`````````````````````___║
║``````````````````.'|   ║
║````````````````.'  |   ║
║````````````````|   |   ║
║````````````````|   |   ║
║````````````````|   |   ║
║````````````````|   |   ║
║````````````````'.  |   ║
║``````````````````'.|___║
║````````````````````````║
║````````````````````````║
╚════════════════════════╝
"#;
pub const WALL_I: &str =
r#"╔════════════════════════╗
║````````````````````````║
║___`````````````````````║
║   |'.``````````````````║
║   |  '.````````````````║
║   |   |````````````````║
║   |   |````````````````║
║   |   |````````````````║
║   |   |````````````````║
║   |  .'````````````````║
║___|.'``````````````````║
║````````````````````````║
║````````````````````````║
╚════════════════════════╝
"#;
pub const WALL_H: &str =
r#"╔════════════════════════╗
║````````````````````````║
║````````````````````````║
║````````````````````````║
║````````________````````║
║```````|        |```````║
║```````|        |```````║
║```````|        |```````║
║```````|________|```````║
║````````````````````````║
║````````````````````````║
║````````````````````````║
║````````````````````````║
╚════════════════════════╝
"#;
pub const WALL_A: &str =
r#"╔════════════════════════╗
║````````````````````````║
║````````````````````````║
║````````````````````````║
║````````````````````````║
║____````````````````````║
║    |:``````````````````║
║____|:``````````````````║
║````````````````````````║
║````````````````````````║
║````````````````````````║
║````````````````````````║
║````````````````````````║
╚════════════════════════╝
"#;
pub const WALL_B: &str =
r#"╔════════════════════════╗
║````````````````````````║
║````````````````````````║
║````````````````````````║
║````````````````````````║
║````````````````````____║
║``````````````````:|    ║
║``````````````````:|____║
║````````````````````````║
║````````````````````````║
║````````````````````````║
║````````````````````````║
║````````````````````````║
╚════════════════════════╝
"#;
pub const WALL_C: &str =
r#"╔════════════════════════╗
║````````````````````````║
║````````````````````````║
║````````````````````````║
║````````````````````````║
║`````____```````````````║
║````|    |:`````````````║
║````|____|:`````````````║
║````````````````````````║
║````````````````````````║
║````````````````````````║
║````````````````````````║
║````````````````````````║
╚════════════════════════╝
"#;
pub const WALL_D: &str =
r#"╔════════════════════════╗
║````````````````````````║
║````````````````````````║
║````````````````````````║
║````````````````````````║
║```````````````____`````║
║`````````````:|    |````║
║`````````````:|____|````║
║````````````````````````║
║````````````````````````║
║````````````````````````║
║````````````````````````║
║````````````````````````║
╚════════════════════════╝
"#;
pub const WALL_E: &str =
r#"╔════════════════════════╗
║````````````````````````║
║````````````````````````║
║````````````````````````║
║````````````````````````║
║``````````____``````````║
║`````````|    |`````````║
║`````````|____|`````````║
║````````````````````````║
║````````````````````````║
║````````````````````````║
║````````````````````````║
║````````````````````````║
╚════════════════════════╝
"#;
pub const WALL_F: &str =
r#"╔════════════════════════╗
║````````````````````````║
║````````````````````````║
║````````````````````````║
║_______.````````````````║
║       |'.``````````````║
║       | |``````````````║
║       | |``````````````║
║_______|.'``````````````║
║````````````````````````║
║````````````````````````║
║````````````````````````║
║````````````````````````║
╚════════════════════════╝
"#;
pub const WALL_G: &str =
